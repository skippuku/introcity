lib:
    move parts of the parser into a library separate from introlib
        preprocessor
        interface for creating types/contexts
    sprint/mprint version of everything that uses stdout
    accurate type print
        would be useful for metaprogramming
    intro_print: follow pointer arrays
    intro_print: detect and handle cyclical references
    intro_print options
        whether to print unnamed members as if their members were within
        max depth
    printf-like formatting print with insertions for types and values of types
    bitfield access
    allocation options as part of context

city:
    !! allocation options
    version for "release" without as much information where types are assumed to match
    attribute to specify allocation function
    type id's?
        could also check against type names or maybe name hashes

attribute:
    !! somehow handle data at an offset to a pointer ex. stb_ds

    come up with a better naming scheme (what the hell is the difference between Attribute, AttributeSpec, AttributeInfo, etc.)
    distinct type for 'attr'? ex. 'typedef struct { uint32_t i; } AttributeHandle;'

    dynamically sized value attributes
        allow multiple aliases
    allow attributes in more places
        functions
        function arguments

    @imply trait: applies additional attributes along when applied
        example: cstring: flag @imply(string, terminated 0)

    'from' attribute: allow conversion from a type, introlib will have builtin conversion functions for basic types
        some way to specify custom conversion functions
    'terminated' attribute?
        specify the terminator (optionally?)

    'type' attribute type
        'as_enum' for when you want an integer to be treated like an enum
            (or maybe just a general 'as')
    'none' attribute type
        makes an attribute not generate any information
        useful for when an attribute is only relevant at compile-time

    members of complex type can specify an attribute as a value: I(default default)
    value(@inherit_base): inherit base of pointer or array type

parse:
    !! GNU and MS alignment attributes
    !! GNU and MS pack attributes/pragma
    detect const
        this can be used for function arguments, to generate better wrappers
    vector types (__m128, etc)
    store type location information
    ParseInfo: have everything, strip away unwated stuff at gen
    parse globals (for libraries that use extern)
    rudimentary C++ support
        templates?
        function overloads
        namespaces
        member functions
        references
        operator overloads?
        parse struct defaults as intro defaults?

expr:
    support globals
    array subscript
    ability to return a value of any type
    compound literals
    handle character literals including L'x'
    handle strings next to each other
    optimise pass
        opt out constant parts

pre:
    FileInfo: add include location
    pragma that adds a file to make dependencies
    parse #line directives
    create #line directives?
    fix -E spacing

gen:
    !! generate header and data seperately, linker will complain about multiple definitions when compiled in multiple objects
    c header: write protect?
    idea: use type infomation to generate the header
        some kind of create_c_constant function or something
    idea: stop using type information to generate anything because changing anything in intro.h can be a nightmare
    allow multiple outputs at once ex. header + city
    vector types (__m128, etc)
    option to create typedefs for structs and enums
    typeof with _Generic?

    more generation options:
        odin "header"
        json info

config:
    default program arguments
    allow config to be appended with another config?
    handle c type sizes
    static assert in .intro file if types don't match
    embed a default config based on how the parser was compiled

test:
    add sanitized target
    test for errors that should be raised by the parser
    more rigorous tests

doc:

examples:
    !! more of these

misc:
    idea: some kind of plugin system
        for when you want to do metaprogramming, it seems more sensible to run your metaprogram along with intro \
          instead of compiling another program.
        these plugins could be inserted at different parts of the process, simplest case being, just run something with the type information before gen
        could be used to add checking to attributes, and maybe other kinds of enforcement
    idea: use parser to generate system headers with types only, no functions
        if we are to have our own system headers, we may as well also parse them into a binary format as well
    memory cleanup
    parse program options and pass only relevant ones to sub-processes
