attribute:
    !! somehow handle data at an offset to a pointer ex. stb_ds
    more strict namespacing
        maybe use dot
    attributes on enum values
    impl: cache matching data
    @repress trait, disable propagation
    general 'terminated' attribute?
        could even be a value, then you could choose what counts as a terminator
    value(*@inherit): inherit base of type?
    'from' attribute: allow conversion from a type, introlib will have builtin conversion functions for basic types
        some way to specify custom conversion functions
    allow attribute declarations with no namespace
    allow multiple aliases somehow
    attribute type: type
        as_enum for when you want an integer to be treated like an enum
            (or maybe just a general 'as')
    members of complex type can specify an attribute as a value: I(default default)
    expression attribute type
        select: attribute describes when a member is valid, ex. unions
        length: change to expression ex. I(length map_width * map_height)
    parse c++ struct defaults as intro defaults?

city:
    offsets might not need to be saved for struct members
    maybe it would be better to save the struct packed anyway?
    type id's

config:
    allow config to be appended with another config?
    handle c type sizes
    static assert in .intro file if types don't match

parse:
    !! GNU and MS alignment attributes
    !! GNU and MS pack attributes/pragma
    handle character literals including L'x'
    fix bitfield regression
    handle bit field accessing
    handle strings next to each other
    const flag?
    parse float expressions (for value attributes)
        general type awareness in expressions?
    parse globals (for libraries that use extern)
    rudimentary C++ support
        function overloads
        namespaces
        member functions
        ignore templates
        operator overloads?

pre:
    !! more options for what parts have information generated
        option to exclude by default, enable with #if __INTRO__
        option to ignore functions
    errors are fucked (again)
        location system is just bad, replace it
    don't evaluate location line until it is known the type will be in info
    save location of includes and defines
    parse #line directives
    parse comments for documentation?
    create #line directives?
    trim big newline gaps

gen:
    !! clang doesn't like flexible array initialization in c++
        might be a good idea to not use flexible arrays at the interface level anyway as it can complicate interfacing in other languages
    !! generate header and data seperately, linker will complain about multiple definitions when compiled in multiple objects
    include macros in introspection data (optionally)
    option to create typedefs for structs and enums
    place all data in one big buffer accessible only through the context, write protect the buffer
    typeof with _Generic?

lib:
    accurate type display
    a little dubious and evil: ability to create types at runtime
    sprint/mprint version of everything that uses stdout
    single header?
    the preprocessor and parser could be part of the lib?

test:
    !! add sanitized target
    test for errors that should be raised by the parser
    more rigorous tests

examples:
    !! more of these

doc:

misc:
    idea: some kind of plugin system
        for when you want to do metaprogramming, it seems more sensible to run your metaprogram along with intro \
          instead of compiling another program.
        these plugins could be inserted at different parts of the process, simplest case being, just run something with the type information before gen
        could be used to add checking to attributes, and maybe other kinds of enforcement
    memory cleanup
    parse program options and pass only relevant ones to sub-processes
    preprocessor should output tokens instead of text
